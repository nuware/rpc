!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r(((e="undefined"!=typeof globalThis?globalThis:e||self).nuware=e.nuware||{},e.nuware.RPC={}))}(this,(function(e){"use strict";const r=(t=0,()=>++t);var t;const o="RPC:CalleeError",n="RPC:CallerError",a="RPC:MethodError";e.VERSION="0.0.2",e.createCallee=()=>{const e=new Map;return{define:(r,t)=>{if("function"!=typeof t)throw new Error('Argument "handler" required and should be a function');e.set(r,t)},receive:async(r={},t)=>{const{id:n=null,method:s,params:i}=r;try{if(!(({method:e,error:r,result:t})=>void 0!==e&&void 0===r&&void 0===t)(r))throw{message:"Invalid Request",type:o};if(!e.has(s))throw{message:"Method not found",type:o};const a=e.get(s),d=await(async(e,{method:r,params:t,id:o},n)=>{try{return await Promise.resolve(e(t,n))}catch(e){const n=`An unexpected error occurred while executing "${r}" RPC method:`;throw console.warn(n,{id:o,params:t,error:e}),e}})(a,{method:s,params:i,id:n},t);return n?{id:n,result:d,error:null}:null}catch(e){const{message:r="Unexpected error",type:t=a}=e,o={message:r,type:t};return n?{id:n,error:o,result:null}:null}}}},e.createCaller=({send:e,createId:t=r}={})=>{if("function"!=typeof e)throw new Error('Property "send" required and should be a function');if("function"!=typeof t)throw new Error('Property "createId" required and should be a function');const o=new Map,a=e=>{const r=o.get(e.id);r&&(o.delete(e.id),r(e))};return{invoke:async({method:r,params:a},s)=>{try{const i=t(),d=await(async({method:r,params:t,id:n=null},a)=>{const s=new Promise((e=>{n&&o.set(n,e)}));return e({method:r,params:t,id:n},a),await s})({method:r,params:a,id:i},s);if(!(({error:e,result:r,method:t})=>void 0===t&&void 0!==e&&void 0!==r)(d))throw{message:"Invalid response format",type:n};if(d.error)throw d.error;return d.result}catch(e){throw e}},notify:async({method:r,params:t},o)=>{try{e({method:r,params:t,id:null},o)}catch(e){}},receive:a,cleanup:()=>{for(const e of o.keys()){a({error:{message:"Pending request is aborted",type:n},result:null,id:e})}},send:e}},e.createRPC=({callee:e,caller:r})=>({define:e.define,receive:async(t,o={})=>{if(isResponse(t))return r.receive(t);if(isRequest(t)){const n=await e.receive(t,o.callee);if(n)return r.send(n,o.caller)}throw{message:"Received an invalid RPC message",type:CallerErrorType}},invoke:r.invoke,notify:r.notify,callee:e,caller:r}),Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=rpc.umd.js.map
