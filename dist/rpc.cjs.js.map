{"version":3,"file":"rpc.cjs.js","sources":["../src/common.js","../src/callee.js","../src/caller.js","../src/index.js"],"sourcesContent":["export const isRequest = ({ method, error, result }) =>\n  method !== undefined && error === undefined && result === undefined\n\nexport const isResponse = ({ error, result, method }) =>\n  method === undefined && error !== undefined && result !== undefined\n\nexport const nextId = ((id) => () => ++id)(0)\n\nexport const CalleeErrorType = 'RPC:CalleeError'\nexport const CallerErrorType = 'RPC:CallerError'\nexport const MethodErrorType = 'RPC:MethodError'\n","import { isRequest, CalleeErrorType, MethodErrorType } from './common.js'\n\nexport const createCallee = () => {\n  const handlers = new Map()\n\n  const define = (name, handler) => {\n    if (typeof handler !== 'function') {\n      throw new Error(`Argument \"handler\" required and should be a function`)\n    }\n    handlers.set(name, handler)\n  }\n\n  const execute = async (handler, { method, params, id }, meta) => {\n    try {\n      return await Promise.resolve(handler(params, meta))\n    } catch (error) {\n      const message = `An unexpected error occurred while executing \"${method}\" RPC method:`\n      console.warn(message, { id, params, error })\n      throw error\n    }\n  }\n\n  const receive = async (payload = {}, meta) => {\n    const { id = null, method, params } = payload\n\n    try {\n      if (!isRequest(payload)) {\n        throw { message: 'Invalid Request', type: CalleeErrorType }\n      }\n\n      if (!handlers.has(method)) {\n        throw { message: 'Method not found', type: CalleeErrorType }\n      }\n\n      const handler = handlers.get(method)\n\n      const result = await execute(handler, { method, params, id }, meta)\n\n      return id ? { id, result, error: null } : null\n    } catch (reason) {\n      const { message = 'Unexpected error', type = MethodErrorType } = reason\n      const error = { message, type }\n      return id ? { id, error, result: null } : null\n    }\n  }\n\n  return {\n    define,\n    receive,\n  }\n}\n","import { nextId, isResponse, CallerErrorType } from './common.js'\n\nexport const createCaller = ({ send, createId = nextId }) => {\n  if (typeof send !== 'function') {\n    throw new Error(`Property \"send\" required and should be a function`)\n  }\n\n  if (typeof createId !== 'function') {\n    throw new Error(`Property \"createId\" required and should be a function`)\n  }\n\n  const requests = new Map()\n\n  const receive = (response) => {\n    const accept = requests.get(response.id)\n    if (accept) {\n      requests.delete(response.id)\n      accept(response)\n    }\n  }\n\n  const execute = async ({ method, params, id = null }, meta) => {\n    const promise = new Promise((accept) => {\n      id && requests.set(id, accept)\n    })\n\n    send({ method, params, id }, meta)\n    return await promise\n  }\n\n  const invoke = async ({ method, params }, meta) => {\n    try {\n      const id = createId()\n      const response = await execute({ method, params, id }, meta)\n\n      if (!isResponse(response)) {\n        throw { message: 'Invalid response format', type: CallerErrorType }\n      }\n\n      if (response.error) {\n        throw response.error\n      }\n\n      return response.result\n    } catch (error) {\n      throw error\n    }\n  }\n\n  const notify = async ({ method, params }, meta) => {\n    try {\n      const id = null\n      send({ method, params, id }, meta)\n    } catch (error) {}\n  }\n\n  const cleanup = () => {\n    for (const id of requests.keys()) {\n      const error = { message: 'Pending request is aborted', type: CallerErrorType }\n      const payload = { error, result: null, id }\n      receive(payload)\n    }\n  }\n\n  return {\n    invoke,\n    notify,\n    receive,\n    cleanup,\n    send,\n  }\n}\n","import { createCaller } from './caller.js'\n\nimport { createCallee } from './callee.js'\n\nexport const VERSION = '[VI]{version}[/VI]'\n\nexport { createCaller, createCallee }\n\nexport const createRPC = ({ callee, caller }) => {\n  const define = callee.define\n\n  const invoke = caller.invoke\n\n  const notify = caller.notify\n\n  const receive = async (payload, meta = {}) => {\n    if (isResponse(payload)) {\n      return caller.receive(payload)\n    }\n\n    if (isRequest(payload)) {\n      const response = await callee.receive(payload, meta.callee)\n      if (response) {\n        return caller.send(response, meta.caller)\n      }\n    }\n\n    throw { message: 'Received an invalid RPC message', type: CallerErrorType }\n  }\n\n  return {\n    define,\n    receive,\n    invoke,\n    notify,\n    callee,\n    caller,\n  }\n}\n"],"names":["define","handlers","meta","error","payload","console","id","message","type","response","requests","invoke","Promise","send","method","result","notify","receive","cleanup","async","callee"],"mappings":"oEACA,4BAQO,mGCuCHA,+GAtCDC,+BAaoCC,8DDtBRC,MAAAA,kDC0BRC,oMAZjB,qCACA,SACA,gFACAC,2EAqBA,OAAOC,kCACP,SACA,MAAMC,2CACQ,CAAEA,QAAAA,EAASC,KAAAA,+SC5BZC,IACf,wBAEEC,6BAiDFC,0CAjCE,MAAML,+DAVQ,IAAIM,8BAKrB,OADCC,GAAOC,OAAAA,yEFvBoBC,OAAAA,8IEwCzB,OAAON,SACP,mBAsBFO,0CAdEH,GAAOC,OAAAA,mCAeTG,QAAAA,EACAC,gDAVkBX,QAAS,8HC3B3BP,gBACAiB,QAjBcE,8BACCf,wCAKb,mEAMH,uEAMCO,gBACAK,gBACAI,OAAAA"}