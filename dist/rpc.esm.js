const e=(r=0,()=>++r);var r;const t="RPC:MethodError",o=({send:r,createId:t=e}={})=>{if("function"!=typeof r)throw new Error('Property "send" required and should be a function');if("function"!=typeof t)throw new Error('Property "createId" required and should be a function');const o=new Map,n=e=>{const r=o.get(e.id);r&&(o.delete(e.id),r(e))};return{invoke:async({method:e,params:n},a)=>{try{const s=t(),i=await(async({method:e,params:t,id:n=null},a)=>{const s=new Promise((e=>{n&&o.set(n,e)}));return r({method:e,params:t,id:n},a),await s})({method:e,params:n,id:s},a);if(!(({error:e,result:r,method:t})=>void 0===t&&void 0!==e&&void 0!==r)(i))throw{message:"Invalid response format",type:"RPC:CallerError"};if(i.error)throw i.error;return i.result}catch(e){throw e}},notify:async({method:e,params:t},o)=>{try{r({method:e,params:t,id:null},o)}catch(e){}},receive:n,cleanup:()=>{for(const e of o.keys()){n({error:{message:"Pending request is aborted",type:"RPC:CallerError"},result:null,id:e})}},send:r}},n=()=>{const e=new Map;return{define:(r,t)=>{if("function"!=typeof t)throw new Error('Argument "handler" required and should be a function');e.set(r,t)},receive:async(r={},o)=>{const{id:n=null,method:a,params:s}=r;try{if(!(({method:e,error:r,result:t})=>void 0!==e&&void 0===r&&void 0===t)(r))throw{message:"Invalid Request",type:"RPC:CalleeError"};if(!e.has(a))throw{message:"Method not found",type:"RPC:CalleeError"};const t=e.get(a),i=await(async(e,{method:r,params:t,id:o},n)=>{try{return await Promise.resolve(e(t,n))}catch(e){const n=`An unexpected error occurred while executing "${r}" RPC method:`;throw console.warn(n,{id:o,params:t,error:e}),e}})(t,{method:a,params:s,id:n},o);return n?{id:n,result:i,error:null}:null}catch(e){const{message:r="Unexpected error",type:o=t}=e,a={message:r,type:o};return n?{id:n,error:a,result:null}:null}}}},a="0.0.2",s=({callee:e,caller:r})=>({define:e.define,receive:async(t,o={})=>{if(isResponse(t))return r.receive(t);if(isRequest(t)){const n=await e.receive(t,o.callee);if(n)return r.send(n,o.caller)}throw{message:"Received an invalid RPC message",type:CallerErrorType}},invoke:r.invoke,notify:r.notify,callee:e,caller:r});export{a as VERSION,n as createCallee,o as createCaller,s as createRPC};
//# sourceMappingURL=rpc.esm.js.map
